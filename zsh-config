# RUBY
if [ -d "/opt/homebrew/opt/ruby/bin" ]; then
  export PATH=/opt/homebrew/opt/ruby/bin:$PATH
  export PATH=`gem environment gemdir`/bin:$PATH
fi

# NVM
export NVM_DIR="$HOME/.nvm"
    [ -s "$HOMEBREW_PREFIX/opt/nvm/nvm.sh" ] && \. "$HOMEBREW_PREFIX/opt/nvm/nvm.sh" # This loads nvm
    [ -s "$HOMEBREW_PREFIX/opt/nvm/etc/bash_completion.d/nvm" ] && \. "$HOMEBREW_PREFIX/opt/nvm/etc/bash_completion.d/nvm" # This loads nvm bash_completion

# FUZZY FINDER
source <(fzf --zsh)

# ZSH AUTOSUGGESTIONS
source $HOMEBREW_PREFIX/share/zsh-autosuggestions/zsh-autosuggestions.zsh

# ZSH COMPLETIONS
if type brew &>/dev/null; then
  FPATH=$(brew --prefix)/share/zsh-completions:$FPATH

  autoload -Uz compinit
  compinit
fi

# FZF-TAB
source ~/.zsh/fzf-tab/fzf-tab.plugin.zsh

HISTSIZE=5000
HISTFILE=~/.zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase

setopt appendhistory
setopt sharehistory
setopt hist_ignore_space
setopt hist_ignore_dups
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_find_no_dups

zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu no
zstyle ':fzf-tab:complete:cd:*' fzf-preview  'ls --color $realpath'

alias ls='ls --color'

# GIT
autoload -Uz vcs_info
precmd() { vcs_info }

zstyle ':vcs_info:git:*' formats '%b'
zstyle ':vcs_info:*' enable git

COLOR_DEF=$'%f'
# COLOR_USR=$'%F{243}'
COLOR_DIR=$'%F{155}'
COLOR_GIT=$'%F{39}'
COLOR_GIT_INFO=$'%F{208}'

# Function to get additional git info
git_prompt_info() {
  if git rev-parse --is-inside-work-tree &>/dev/null; then
    local branch stash_count ahead behind staged unstaged
    local git_info=""

    # Get branch name
    branch=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)

    # Get stash count
    stash_count=$(git stash list 2>/dev/null | wc -l)
    
    # Get ahead/behind info
    ahead_behind=$(git rev-list --left-right --count @{upstream}...HEAD 2>/dev/null)
    ahead=$(echo $ahead_behind | awk '{print $2}')
    behind=$(echo $ahead_behind | awk '{print $1}')
    
    # Get staged and unstaged files count
    staged=$(git diff --cached --name-only 2>/dev/null | wc -l)
    unstaged=$(git status --porcelain 2>/dev/null | wc -l)
    unstaged=$((unstaged - staged))

    # Build the git_info string with exact spacing
    local parts=()
    
    [ "$stash_count" -gt 0 ] && parts+=("$stash_count*")
    [ "$behind" -gt 0 ] && parts+=("$behind↓")
    [ "$ahead" -gt 0 ] && parts+=("$ahead↑")
    [ "$unstaged" -gt 0 ] && parts+=("$unstaged?")
    [ "$staged" -gt 0 ] && parts+=("$staged!")

    # Join parts with single spaces and trim any extra spaces
    git_info=$(printf '%s\n' "${parts[@]}" | xargs | sed 's/ $//')

    # Return git info in orange
    if [ -n "$git_info" ]; then
      echo " ${COLOR_GIT}[$branch] ${COLOR_GIT_INFO}$git_info"
    else
      echo " ${COLOR_GIT}[$branch]"
    fi
  fi
}

setopt PROMPT_SUBST
# export PROMPT=' ${COLOR_USR}%n ${COLOR_DIR}%~$(git_prompt_info) ${COLOR_DEF}$ '
export PROMPT=' ${COLOR_DIR}%~$(git_prompt_info) ${COLOR_DEF}$ '

#EI VPN setup with openconnect
function vpn-up() {
  echo "Starting the vpn ..."
  # Optional flag if you want to run it in the background and do work in the same terminal
  # The vpn-down function can be used to stop the vpn, otherwise without the background flag you can just ctrl+c
  # --background
  sudo openconnect --user=BozhiDe --protocol=anyconnect -c /Users/dodo/Documents/BozhiDe.p12 --key-password=12345678 --server=vpn.aerlingus.com
}
 
function vpn-down() {
  echo "Stopping the vpn ..."
  sudo kill -2 `pgrep openconnect`
}
